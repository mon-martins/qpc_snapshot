//$file${.::AOs::blinky.h} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//
// Model: example.qm
// File:  ${.::AOs::blinky.h}
//
// This code has been generated by QM 6.2.3 <www.state-machine.com/qm>.
// DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
//
//                 ____________________________________
//                /                                   /
//               /    GGGGGGG    PPPPPPPP   LL       /
//              /   GG     GG   PP     PP  LL       /
//             /   GG          PP     PP  LL       /
//            /   GG   GGGGG  PPPPPPPP   LL       /
//           /   GG      GG  PP         LL       /
//          /     GGGGGGG   PP         LLLLLLL  /
//         /___________________________________/
//
// Copyright (c) 2005 Quantum Leaps, LLC
// SPDX-License-Identifier: GPL-3.0-or-later
//
// This generated code is open-source software licensed under the GNU
// General Public License (GPL) as published by the Free Software Foundation
// (see <https://www.gnu.org/licenses>).
//
// NOTE:
// The GPL does NOT permit the incorporation of this code into proprietary
// programs. Please contact Quantum Leaps for commercial licensing options,
// which expressly supersede the GPL and are designed explicitly for licensees
// interested in retaining the proprietary status of the generated code.
//
// Quantum Leaps contact information:
// <www.state-machine.com/licensing>
// <info@state-machine.com>
//
//$endhead${.::AOs::blinky.h} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#ifndef BLINKY_H_
#define BLINKY_H_

#include "main_qm.h"

// Orthogonal Component


// Declare your AO:

//$declare${CPU1::AOs::AO_BLINKY} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

//${CPU1::AOs::AO_BLINKY::blinky} ............................................
typedef struct {
// protected:
    QActive super;

// private:
    QTimeEvt time_evt;
} blinky;

// public:
void blinky_led_on(blinky * const me);
void blinky_led_off(blinky * const me);

// protected:
QState blinky_initial(blinky * const me, void const * const par);
QState blinky_off(blinky * const me, QEvt const * const e);
QState blinky_on(blinky * const me, QEvt const * const e);

//${CPU1::AOs::AO_BLINKY::inst_ao_blinky} ....................................
extern blinky inst_ao_blinky;

//${CPU1::AOs::AO_BLINKY::globals::p_ao_blinky} ..............................
extern QActive * const p_ao_blinky;

//${CPU1::AOs::AO_BLINKY::globals::ao_blinky_ctor} ...........................
void ao_blinky_ctor(const QActive  * const pAO);
//$enddecl${CPU1::AOs::AO_BLINKY} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

#endif // BLINKY_H_
